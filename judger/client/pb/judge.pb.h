// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: judge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_judge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_judge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_judge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_judge_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_judge_2eproto;
namespace judge {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace judge
PROTOBUF_NAMESPACE_OPEN
template<> ::judge::Config* Arena::CreateMaybeMessage<::judge::Config>(Arena*);
template<> ::judge::Result* Arena::CreateMaybeMessage<::judge::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace judge {

enum ErrorCode : int {
  SUCCESS = 0,
  INVALID_CONFIG = -1,
  FORK_FAILED = -2,
  PTHREAD_FAILED = -3,
  WAIT_FAILED = -4,
  ROOT_REQUIRED = -5,
  LOAD_SECCOMP_FAILED = -6,
  SETRLIMIT_FAILED = -7,
  DUP2_FAILED = -8,
  SETUID_FAILED = -9,
  EXECVE_FAILED = -10,
  SPJ_ERROR = -11,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = SPJ_ERROR;
constexpr ErrorCode ErrorCode_MAX = SUCCESS;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum ResultCode : int {
  ACCEPTED = 0,
  WRONG_ANSWER = -1,
  CPU_TIME_LIMIT_EXCEEDED = 1,
  REAL_TIME_LIMIT_EXCEEDED = 2,
  MEMORY_LIMIT_EXCEEDED = 3,
  RUNTIME_ERROR = 4,
  SYSTEM_ERROR = 5,
  ResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultCode_IsValid(int value);
constexpr ResultCode ResultCode_MIN = WRONG_ANSWER;
constexpr ResultCode ResultCode_MAX = SYSTEM_ERROR;
constexpr int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor();
template<typename T>
inline const std::string& ResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultCode_descriptor(), enum_t_value);
}
inline bool ResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
// ===================================================================

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:judge.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "judge.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_judge_2eproto);
    return ::descriptor_table_judge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 12,
    kEnvFieldNumber = 13,
    kExePathFieldNumber = 8,
    kInputPathFieldNumber = 9,
    kOutputPathFieldNumber = 10,
    kErrorPathFieldNumber = 11,
    kLogPathFieldNumber = 14,
    kMaxCpuTimeFieldNumber = 1,
    kMaxRealTimeFieldNumber = 2,
    kMaxMemoryFieldNumber = 3,
    kMaxStackFieldNumber = 4,
    kMaxOutputSizeFieldNumber = 6,
    kMaxProcessNumberFieldNumber = 5,
    kMemoryLimitCheckOnlyFieldNumber = 7,
    kUidFieldNumber = 16,
    kGidFieldNumber = 17,
    kUseSeccompFieldNumber = 18,
  };
  // repeated string args = 12;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // repeated string env = 13;
  int env_size() const;
  private:
  int _internal_env_size() const;
  public:
  void clear_env();
  const std::string& env(int index) const;
  std::string* mutable_env(int index);
  void set_env(int index, const std::string& value);
  void set_env(int index, std::string&& value);
  void set_env(int index, const char* value);
  void set_env(int index, const char* value, size_t size);
  std::string* add_env();
  void add_env(const std::string& value);
  void add_env(std::string&& value);
  void add_env(const char* value);
  void add_env(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& env() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_env();
  private:
  const std::string& _internal_env(int index) const;
  std::string* _internal_add_env();
  public:

  // string exe_path = 8;
  void clear_exe_path();
  const std::string& exe_path() const;
  void set_exe_path(const std::string& value);
  void set_exe_path(std::string&& value);
  void set_exe_path(const char* value);
  void set_exe_path(const char* value, size_t size);
  std::string* mutable_exe_path();
  std::string* release_exe_path();
  void set_allocated_exe_path(std::string* exe_path);
  private:
  const std::string& _internal_exe_path() const;
  void _internal_set_exe_path(const std::string& value);
  std::string* _internal_mutable_exe_path();
  public:

  // string input_path = 9;
  void clear_input_path();
  const std::string& input_path() const;
  void set_input_path(const std::string& value);
  void set_input_path(std::string&& value);
  void set_input_path(const char* value);
  void set_input_path(const char* value, size_t size);
  std::string* mutable_input_path();
  std::string* release_input_path();
  void set_allocated_input_path(std::string* input_path);
  private:
  const std::string& _internal_input_path() const;
  void _internal_set_input_path(const std::string& value);
  std::string* _internal_mutable_input_path();
  public:

  // string output_path = 10;
  void clear_output_path();
  const std::string& output_path() const;
  void set_output_path(const std::string& value);
  void set_output_path(std::string&& value);
  void set_output_path(const char* value);
  void set_output_path(const char* value, size_t size);
  std::string* mutable_output_path();
  std::string* release_output_path();
  void set_allocated_output_path(std::string* output_path);
  private:
  const std::string& _internal_output_path() const;
  void _internal_set_output_path(const std::string& value);
  std::string* _internal_mutable_output_path();
  public:

  // string error_path = 11;
  void clear_error_path();
  const std::string& error_path() const;
  void set_error_path(const std::string& value);
  void set_error_path(std::string&& value);
  void set_error_path(const char* value);
  void set_error_path(const char* value, size_t size);
  std::string* mutable_error_path();
  std::string* release_error_path();
  void set_allocated_error_path(std::string* error_path);
  private:
  const std::string& _internal_error_path() const;
  void _internal_set_error_path(const std::string& value);
  std::string* _internal_mutable_error_path();
  public:

  // string log_path = 14;
  void clear_log_path();
  const std::string& log_path() const;
  void set_log_path(const std::string& value);
  void set_log_path(std::string&& value);
  void set_log_path(const char* value);
  void set_log_path(const char* value, size_t size);
  std::string* mutable_log_path();
  std::string* release_log_path();
  void set_allocated_log_path(std::string* log_path);
  private:
  const std::string& _internal_log_path() const;
  void _internal_set_log_path(const std::string& value);
  std::string* _internal_mutable_log_path();
  public:

  // int32 max_cpu_time = 1;
  void clear_max_cpu_time();
  ::PROTOBUF_NAMESPACE_ID::int32 max_cpu_time() const;
  void set_max_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_cpu_time() const;
  void _internal_set_max_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_real_time = 2;
  void clear_max_real_time();
  ::PROTOBUF_NAMESPACE_ID::int32 max_real_time() const;
  void set_max_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_real_time() const;
  void _internal_set_max_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 max_memory = 3;
  void clear_max_memory();
  ::PROTOBUF_NAMESPACE_ID::int64 max_memory() const;
  void set_max_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_memory() const;
  void _internal_set_max_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_stack = 4;
  void clear_max_stack();
  ::PROTOBUF_NAMESPACE_ID::int64 max_stack() const;
  void set_max_stack(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_stack() const;
  void _internal_set_max_stack(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_output_size = 6;
  void clear_max_output_size();
  ::PROTOBUF_NAMESPACE_ID::int64 max_output_size() const;
  void set_max_output_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_output_size() const;
  void _internal_set_max_output_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 max_process_number = 5;
  void clear_max_process_number();
  ::PROTOBUF_NAMESPACE_ID::int32 max_process_number() const;
  void set_max_process_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_process_number() const;
  void _internal_set_max_process_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 memory_limit_check_only = 7;
  void clear_memory_limit_check_only();
  ::PROTOBUF_NAMESPACE_ID::int32 memory_limit_check_only() const;
  void set_memory_limit_check_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory_limit_check_only() const;
  void _internal_set_memory_limit_check_only(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 uid = 16;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 gid = 17;
  void clear_gid();
  ::PROTOBUF_NAMESPACE_ID::int32 gid() const;
  void set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gid() const;
  void _internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_seccomp = 18;
  void clear_use_seccomp();
  bool use_seccomp() const;
  void set_use_seccomp(bool value);
  private:
  bool _internal_use_seccomp() const;
  void _internal_set_use_seccomp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:judge.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> env_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exe_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_cpu_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_real_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_memory_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_stack_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_output_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_process_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_limit_check_only_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gid_;
  bool use_seccomp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_judge_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:judge.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "judge.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_judge_2eproto);
    return ::descriptor_table_judge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuTimeFieldNumber = 1,
    kRealTimeFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kSignalFieldNumber = 4,
    kExitCodeFieldNumber = 5,
    kErrorFieldNumber = 6,
    kResultFieldNumber = 7,
  };
  // int32 cpu_time = 1;
  void clear_cpu_time();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_time() const;
  void set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_time() const;
  void _internal_set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 real_time = 2;
  void clear_real_time();
  ::PROTOBUF_NAMESPACE_ID::int32 real_time() const;
  void set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_real_time() const;
  void _internal_set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 memory = 3;
  void clear_memory();
  ::PROTOBUF_NAMESPACE_ID::int64 memory() const;
  void set_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_memory() const;
  void _internal_set_memory(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 signal = 4;
  void clear_signal();
  ::PROTOBUF_NAMESPACE_ID::int32 signal() const;
  void set_signal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_signal() const;
  void _internal_set_signal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exit_code = 5;
  void clear_exit_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code() const;
  void set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exit_code() const;
  void _internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .judge.ErrorCode error = 6;
  void clear_error();
  ::judge::ErrorCode error() const;
  void set_error(::judge::ErrorCode value);
  private:
  ::judge::ErrorCode _internal_error() const;
  void _internal_set_error(::judge::ErrorCode value);
  public:

  // .judge.ResultCode result = 7;
  void clear_result();
  ::judge::ResultCode result() const;
  void set_result(::judge::ResultCode value);
  private:
  ::judge::ResultCode _internal_result() const;
  void _internal_set_result(::judge::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:judge.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 real_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 memory_;
  ::PROTOBUF_NAMESPACE_ID::int32 signal_;
  ::PROTOBUF_NAMESPACE_ID::int32 exit_code_;
  int error_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_judge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// int32 max_cpu_time = 1;
inline void Config::clear_max_cpu_time() {
  max_cpu_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_max_cpu_time() const {
  return max_cpu_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::max_cpu_time() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_cpu_time)
  return _internal_max_cpu_time();
}
inline void Config::_internal_set_max_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_cpu_time_ = value;
}
inline void Config::set_max_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_cpu_time(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_cpu_time)
}

// int32 max_real_time = 2;
inline void Config::clear_max_real_time() {
  max_real_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_max_real_time() const {
  return max_real_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::max_real_time() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_real_time)
  return _internal_max_real_time();
}
inline void Config::_internal_set_max_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_real_time_ = value;
}
inline void Config::set_max_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_real_time(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_real_time)
}

// int64 max_memory = 3;
inline void Config::clear_max_memory() {
  max_memory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::_internal_max_memory() const {
  return max_memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::max_memory() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_memory)
  return _internal_max_memory();
}
inline void Config::_internal_set_max_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_memory_ = value;
}
inline void Config::set_max_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_memory(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_memory)
}

// int64 max_stack = 4;
inline void Config::clear_max_stack() {
  max_stack_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::_internal_max_stack() const {
  return max_stack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::max_stack() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_stack)
  return _internal_max_stack();
}
inline void Config::_internal_set_max_stack(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_stack_ = value;
}
inline void Config::set_max_stack(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_stack(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_stack)
}

// int32 max_process_number = 5;
inline void Config::clear_max_process_number() {
  max_process_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_max_process_number() const {
  return max_process_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::max_process_number() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_process_number)
  return _internal_max_process_number();
}
inline void Config::_internal_set_max_process_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_process_number_ = value;
}
inline void Config::set_max_process_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_process_number(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_process_number)
}

// int64 max_output_size = 6;
inline void Config::clear_max_output_size() {
  max_output_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::_internal_max_output_size() const {
  return max_output_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Config::max_output_size() const {
  // @@protoc_insertion_point(field_get:judge.Config.max_output_size)
  return _internal_max_output_size();
}
inline void Config::_internal_set_max_output_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_output_size_ = value;
}
inline void Config::set_max_output_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_output_size(value);
  // @@protoc_insertion_point(field_set:judge.Config.max_output_size)
}

// int32 memory_limit_check_only = 7;
inline void Config::clear_memory_limit_check_only() {
  memory_limit_check_only_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_memory_limit_check_only() const {
  return memory_limit_check_only_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::memory_limit_check_only() const {
  // @@protoc_insertion_point(field_get:judge.Config.memory_limit_check_only)
  return _internal_memory_limit_check_only();
}
inline void Config::_internal_set_memory_limit_check_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memory_limit_check_only_ = value;
}
inline void Config::set_memory_limit_check_only(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory_limit_check_only(value);
  // @@protoc_insertion_point(field_set:judge.Config.memory_limit_check_only)
}

// string exe_path = 8;
inline void Config::clear_exe_path() {
  exe_path_.ClearToEmpty();
}
inline const std::string& Config::exe_path() const {
  // @@protoc_insertion_point(field_get:judge.Config.exe_path)
  return _internal_exe_path();
}
inline void Config::set_exe_path(const std::string& value) {
  _internal_set_exe_path(value);
  // @@protoc_insertion_point(field_set:judge.Config.exe_path)
}
inline std::string* Config::mutable_exe_path() {
  // @@protoc_insertion_point(field_mutable:judge.Config.exe_path)
  return _internal_mutable_exe_path();
}
inline const std::string& Config::_internal_exe_path() const {
  return exe_path_.Get();
}
inline void Config::_internal_set_exe_path(const std::string& value) {
  
  exe_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_exe_path(std::string&& value) {
  
  exe_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:judge.Config.exe_path)
}
inline void Config::set_exe_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exe_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:judge.Config.exe_path)
}
inline void Config::set_exe_path(const char* value,
    size_t size) {
  
  exe_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:judge.Config.exe_path)
}
inline std::string* Config::_internal_mutable_exe_path() {
  
  return exe_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_exe_path() {
  // @@protoc_insertion_point(field_release:judge.Config.exe_path)
  return exe_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_exe_path(std::string* exe_path) {
  if (exe_path != nullptr) {
    
  } else {
    
  }
  exe_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exe_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:judge.Config.exe_path)
}

// string input_path = 9;
inline void Config::clear_input_path() {
  input_path_.ClearToEmpty();
}
inline const std::string& Config::input_path() const {
  // @@protoc_insertion_point(field_get:judge.Config.input_path)
  return _internal_input_path();
}
inline void Config::set_input_path(const std::string& value) {
  _internal_set_input_path(value);
  // @@protoc_insertion_point(field_set:judge.Config.input_path)
}
inline std::string* Config::mutable_input_path() {
  // @@protoc_insertion_point(field_mutable:judge.Config.input_path)
  return _internal_mutable_input_path();
}
inline const std::string& Config::_internal_input_path() const {
  return input_path_.Get();
}
inline void Config::_internal_set_input_path(const std::string& value) {
  
  input_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_input_path(std::string&& value) {
  
  input_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:judge.Config.input_path)
}
inline void Config::set_input_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:judge.Config.input_path)
}
inline void Config::set_input_path(const char* value,
    size_t size) {
  
  input_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:judge.Config.input_path)
}
inline std::string* Config::_internal_mutable_input_path() {
  
  return input_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_input_path() {
  // @@protoc_insertion_point(field_release:judge.Config.input_path)
  return input_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_input_path(std::string* input_path) {
  if (input_path != nullptr) {
    
  } else {
    
  }
  input_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:judge.Config.input_path)
}

// string output_path = 10;
inline void Config::clear_output_path() {
  output_path_.ClearToEmpty();
}
inline const std::string& Config::output_path() const {
  // @@protoc_insertion_point(field_get:judge.Config.output_path)
  return _internal_output_path();
}
inline void Config::set_output_path(const std::string& value) {
  _internal_set_output_path(value);
  // @@protoc_insertion_point(field_set:judge.Config.output_path)
}
inline std::string* Config::mutable_output_path() {
  // @@protoc_insertion_point(field_mutable:judge.Config.output_path)
  return _internal_mutable_output_path();
}
inline const std::string& Config::_internal_output_path() const {
  return output_path_.Get();
}
inline void Config::_internal_set_output_path(const std::string& value) {
  
  output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_output_path(std::string&& value) {
  
  output_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:judge.Config.output_path)
}
inline void Config::set_output_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:judge.Config.output_path)
}
inline void Config::set_output_path(const char* value,
    size_t size) {
  
  output_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:judge.Config.output_path)
}
inline std::string* Config::_internal_mutable_output_path() {
  
  return output_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_output_path() {
  // @@protoc_insertion_point(field_release:judge.Config.output_path)
  return output_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_output_path(std::string* output_path) {
  if (output_path != nullptr) {
    
  } else {
    
  }
  output_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:judge.Config.output_path)
}

// string error_path = 11;
inline void Config::clear_error_path() {
  error_path_.ClearToEmpty();
}
inline const std::string& Config::error_path() const {
  // @@protoc_insertion_point(field_get:judge.Config.error_path)
  return _internal_error_path();
}
inline void Config::set_error_path(const std::string& value) {
  _internal_set_error_path(value);
  // @@protoc_insertion_point(field_set:judge.Config.error_path)
}
inline std::string* Config::mutable_error_path() {
  // @@protoc_insertion_point(field_mutable:judge.Config.error_path)
  return _internal_mutable_error_path();
}
inline const std::string& Config::_internal_error_path() const {
  return error_path_.Get();
}
inline void Config::_internal_set_error_path(const std::string& value) {
  
  error_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_error_path(std::string&& value) {
  
  error_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:judge.Config.error_path)
}
inline void Config::set_error_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:judge.Config.error_path)
}
inline void Config::set_error_path(const char* value,
    size_t size) {
  
  error_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:judge.Config.error_path)
}
inline std::string* Config::_internal_mutable_error_path() {
  
  return error_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_error_path() {
  // @@protoc_insertion_point(field_release:judge.Config.error_path)
  return error_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_error_path(std::string* error_path) {
  if (error_path != nullptr) {
    
  } else {
    
  }
  error_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:judge.Config.error_path)
}

// repeated string args = 12;
inline int Config::_internal_args_size() const {
  return args_.size();
}
inline int Config::args_size() const {
  return _internal_args_size();
}
inline void Config::clear_args() {
  args_.Clear();
}
inline std::string* Config::add_args() {
  // @@protoc_insertion_point(field_add_mutable:judge.Config.args)
  return _internal_add_args();
}
inline const std::string& Config::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& Config::args(int index) const {
  // @@protoc_insertion_point(field_get:judge.Config.args)
  return _internal_args(index);
}
inline std::string* Config::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:judge.Config.args)
  return args_.Mutable(index);
}
inline void Config::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:judge.Config.args)
  args_.Mutable(index)->assign(value);
}
inline void Config::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:judge.Config.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void Config::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:judge.Config.args)
}
inline void Config::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:judge.Config.args)
}
inline std::string* Config::_internal_add_args() {
  return args_.Add();
}
inline void Config::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:judge.Config.args)
}
inline void Config::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:judge.Config.args)
}
inline void Config::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:judge.Config.args)
}
inline void Config::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:judge.Config.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Config::args() const {
  // @@protoc_insertion_point(field_list:judge.Config.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Config::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:judge.Config.args)
  return &args_;
}

// repeated string env = 13;
inline int Config::_internal_env_size() const {
  return env_.size();
}
inline int Config::env_size() const {
  return _internal_env_size();
}
inline void Config::clear_env() {
  env_.Clear();
}
inline std::string* Config::add_env() {
  // @@protoc_insertion_point(field_add_mutable:judge.Config.env)
  return _internal_add_env();
}
inline const std::string& Config::_internal_env(int index) const {
  return env_.Get(index);
}
inline const std::string& Config::env(int index) const {
  // @@protoc_insertion_point(field_get:judge.Config.env)
  return _internal_env(index);
}
inline std::string* Config::mutable_env(int index) {
  // @@protoc_insertion_point(field_mutable:judge.Config.env)
  return env_.Mutable(index);
}
inline void Config::set_env(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:judge.Config.env)
  env_.Mutable(index)->assign(value);
}
inline void Config::set_env(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:judge.Config.env)
  env_.Mutable(index)->assign(std::move(value));
}
inline void Config::set_env(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:judge.Config.env)
}
inline void Config::set_env(int index, const char* value, size_t size) {
  env_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:judge.Config.env)
}
inline std::string* Config::_internal_add_env() {
  return env_.Add();
}
inline void Config::add_env(const std::string& value) {
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:judge.Config.env)
}
inline void Config::add_env(std::string&& value) {
  env_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:judge.Config.env)
}
inline void Config::add_env(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  env_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:judge.Config.env)
}
inline void Config::add_env(const char* value, size_t size) {
  env_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:judge.Config.env)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Config::env() const {
  // @@protoc_insertion_point(field_list:judge.Config.env)
  return env_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Config::mutable_env() {
  // @@protoc_insertion_point(field_mutable_list:judge.Config.env)
  return &env_;
}

// string log_path = 14;
inline void Config::clear_log_path() {
  log_path_.ClearToEmpty();
}
inline const std::string& Config::log_path() const {
  // @@protoc_insertion_point(field_get:judge.Config.log_path)
  return _internal_log_path();
}
inline void Config::set_log_path(const std::string& value) {
  _internal_set_log_path(value);
  // @@protoc_insertion_point(field_set:judge.Config.log_path)
}
inline std::string* Config::mutable_log_path() {
  // @@protoc_insertion_point(field_mutable:judge.Config.log_path)
  return _internal_mutable_log_path();
}
inline const std::string& Config::_internal_log_path() const {
  return log_path_.Get();
}
inline void Config::_internal_set_log_path(const std::string& value) {
  
  log_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_log_path(std::string&& value) {
  
  log_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:judge.Config.log_path)
}
inline void Config::set_log_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:judge.Config.log_path)
}
inline void Config::set_log_path(const char* value,
    size_t size) {
  
  log_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:judge.Config.log_path)
}
inline std::string* Config::_internal_mutable_log_path() {
  
  return log_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_log_path() {
  // @@protoc_insertion_point(field_release:judge.Config.log_path)
  return log_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_log_path(std::string* log_path) {
  if (log_path != nullptr) {
    
  } else {
    
  }
  log_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:judge.Config.log_path)
}

// uint32 uid = 16;
inline void Config::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Config::uid() const {
  // @@protoc_insertion_point(field_get:judge.Config.uid)
  return _internal_uid();
}
inline void Config::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void Config::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:judge.Config.uid)
}

// sint32 gid = 17;
inline void Config::clear_gid() {
  gid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_gid() const {
  return gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::gid() const {
  // @@protoc_insertion_point(field_get:judge.Config.gid)
  return _internal_gid();
}
inline void Config::_internal_set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gid_ = value;
}
inline void Config::set_gid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gid(value);
  // @@protoc_insertion_point(field_set:judge.Config.gid)
}

// bool use_seccomp = 18;
inline void Config::clear_use_seccomp() {
  use_seccomp_ = false;
}
inline bool Config::_internal_use_seccomp() const {
  return use_seccomp_;
}
inline bool Config::use_seccomp() const {
  // @@protoc_insertion_point(field_get:judge.Config.use_seccomp)
  return _internal_use_seccomp();
}
inline void Config::_internal_set_use_seccomp(bool value) {
  
  use_seccomp_ = value;
}
inline void Config::set_use_seccomp(bool value) {
  _internal_set_use_seccomp(value);
  // @@protoc_insertion_point(field_set:judge.Config.use_seccomp)
}

// -------------------------------------------------------------------

// Result

// int32 cpu_time = 1;
inline void Result::clear_cpu_time() {
  cpu_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_cpu_time() const {
  return cpu_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::cpu_time() const {
  // @@protoc_insertion_point(field_get:judge.Result.cpu_time)
  return _internal_cpu_time();
}
inline void Result::_internal_set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpu_time_ = value;
}
inline void Result::set_cpu_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_time(value);
  // @@protoc_insertion_point(field_set:judge.Result.cpu_time)
}

// int32 real_time = 2;
inline void Result::clear_real_time() {
  real_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_real_time() const {
  return real_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::real_time() const {
  // @@protoc_insertion_point(field_get:judge.Result.real_time)
  return _internal_real_time();
}
inline void Result::_internal_set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  real_time_ = value;
}
inline void Result::set_real_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_real_time(value);
  // @@protoc_insertion_point(field_set:judge.Result.real_time)
}

// int64 memory = 3;
inline void Result::clear_memory() {
  memory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Result::_internal_memory() const {
  return memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Result::memory() const {
  // @@protoc_insertion_point(field_get:judge.Result.memory)
  return _internal_memory();
}
inline void Result::_internal_set_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  memory_ = value;
}
inline void Result::set_memory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:judge.Result.memory)
}

// int32 signal = 4;
inline void Result::clear_signal() {
  signal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_signal() const {
  return signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::signal() const {
  // @@protoc_insertion_point(field_get:judge.Result.signal)
  return _internal_signal();
}
inline void Result::_internal_set_signal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  signal_ = value;
}
inline void Result::set_signal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:judge.Result.signal)
}

// int32 exit_code = 5;
inline void Result::clear_exit_code() {
  exit_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_exit_code() const {
  return exit_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::exit_code() const {
  // @@protoc_insertion_point(field_get:judge.Result.exit_code)
  return _internal_exit_code();
}
inline void Result::_internal_set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exit_code_ = value;
}
inline void Result::set_exit_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:judge.Result.exit_code)
}

// .judge.ErrorCode error = 6;
inline void Result::clear_error() {
  error_ = 0;
}
inline ::judge::ErrorCode Result::_internal_error() const {
  return static_cast< ::judge::ErrorCode >(error_);
}
inline ::judge::ErrorCode Result::error() const {
  // @@protoc_insertion_point(field_get:judge.Result.error)
  return _internal_error();
}
inline void Result::_internal_set_error(::judge::ErrorCode value) {
  
  error_ = value;
}
inline void Result::set_error(::judge::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:judge.Result.error)
}

// .judge.ResultCode result = 7;
inline void Result::clear_result() {
  result_ = 0;
}
inline ::judge::ResultCode Result::_internal_result() const {
  return static_cast< ::judge::ResultCode >(result_);
}
inline ::judge::ResultCode Result::result() const {
  // @@protoc_insertion_point(field_get:judge.Result.result)
  return _internal_result();
}
inline void Result::_internal_set_result(::judge::ResultCode value) {
  
  result_ = value;
}
inline void Result::set_result(::judge::ResultCode value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:judge.Result.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace judge

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::judge::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::judge::ErrorCode>() {
  return ::judge::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::judge::ResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::judge::ResultCode>() {
  return ::judge::ResultCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_judge_2eproto
