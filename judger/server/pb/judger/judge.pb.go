// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.14.0
// source: judge.proto

package judger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_SUCCESS             ErrorCode = 0
	ErrorCode_INVALID_CONFIG      ErrorCode = -1
	ErrorCode_FORK_FAILED         ErrorCode = -2
	ErrorCode_PTHREAD_FAILED      ErrorCode = -3
	ErrorCode_WAIT_FAILED         ErrorCode = -4
	ErrorCode_ROOT_REQUIRED       ErrorCode = -5
	ErrorCode_LOAD_SECCOMP_FAILED ErrorCode = -6
	ErrorCode_SETRLIMIT_FAILED    ErrorCode = -7
	ErrorCode_DUP2_FAILED         ErrorCode = -8
	ErrorCode_SETUID_FAILED       ErrorCode = -9
	ErrorCode_EXECVE_FAILED       ErrorCode = -10
	ErrorCode_SPJ_ERROR           ErrorCode = -11
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "SUCCESS",
		-1:  "INVALID_CONFIG",
		-2:  "FORK_FAILED",
		-3:  "PTHREAD_FAILED",
		-4:  "WAIT_FAILED",
		-5:  "ROOT_REQUIRED",
		-6:  "LOAD_SECCOMP_FAILED",
		-7:  "SETRLIMIT_FAILED",
		-8:  "DUP2_FAILED",
		-9:  "SETUID_FAILED",
		-10: "EXECVE_FAILED",
		-11: "SPJ_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":             0,
		"INVALID_CONFIG":      -1,
		"FORK_FAILED":         -2,
		"PTHREAD_FAILED":      -3,
		"WAIT_FAILED":         -4,
		"ROOT_REQUIRED":       -5,
		"LOAD_SECCOMP_FAILED": -6,
		"SETRLIMIT_FAILED":    -7,
		"DUP2_FAILED":         -8,
		"SETUID_FAILED":       -9,
		"EXECVE_FAILED":       -10,
		"SPJ_ERROR":           -11,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_judge_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_judge_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_judge_proto_rawDescGZIP(), []int{0}
}

type ResultCode int32

const (
	ResultCode_ACCEPTED                 ResultCode = 0
	ResultCode_WRONG_ANSWER             ResultCode = -1
	ResultCode_CPU_TIME_LIMIT_EXCEEDED  ResultCode = 1
	ResultCode_REAL_TIME_LIMIT_EXCEEDED ResultCode = 2
	ResultCode_MEMORY_LIMIT_EXCEEDED    ResultCode = 3
	ResultCode_RUNTIME_ERROR            ResultCode = 4
	ResultCode_SYSTEM_ERROR             ResultCode = 5
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0:  "ACCEPTED",
		-1: "WRONG_ANSWER",
		1:  "CPU_TIME_LIMIT_EXCEEDED",
		2:  "REAL_TIME_LIMIT_EXCEEDED",
		3:  "MEMORY_LIMIT_EXCEEDED",
		4:  "RUNTIME_ERROR",
		5:  "SYSTEM_ERROR",
	}
	ResultCode_value = map[string]int32{
		"ACCEPTED":                 0,
		"WRONG_ANSWER":             -1,
		"CPU_TIME_LIMIT_EXCEEDED":  1,
		"REAL_TIME_LIMIT_EXCEEDED": 2,
		"MEMORY_LIMIT_EXCEEDED":    3,
		"RUNTIME_ERROR":            4,
		"SYSTEM_ERROR":             5,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_judge_proto_enumTypes[1].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_judge_proto_enumTypes[1]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_judge_proto_rawDescGZIP(), []int{1}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCpuTime           int32    `protobuf:"varint,1,opt,name=max_cpu_time,json=maxCpuTime,proto3" json:"max_cpu_time,omitempty"`
	MaxRealTime          int32    `protobuf:"varint,2,opt,name=max_real_time,json=maxRealTime,proto3" json:"max_real_time,omitempty"`
	MaxMemory            int64    `protobuf:"varint,3,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
	MaxStack             int64    `protobuf:"varint,4,opt,name=max_stack,json=maxStack,proto3" json:"max_stack,omitempty"`
	MaxProcessNumber     int32    `protobuf:"varint,5,opt,name=max_process_number,json=maxProcessNumber,proto3" json:"max_process_number,omitempty"`
	MaxOutputSize        int64    `protobuf:"varint,6,opt,name=max_output_size,json=maxOutputSize,proto3" json:"max_output_size,omitempty"`
	MemoryLimitCheckOnly int32    `protobuf:"varint,7,opt,name=memory_limit_check_only,json=memoryLimitCheckOnly,proto3" json:"memory_limit_check_only,omitempty"`
	ExePath              string   `protobuf:"bytes,8,opt,name=exe_path,json=exePath,proto3" json:"exe_path,omitempty"`
	InputPath            string   `protobuf:"bytes,9,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	OutputPath           string   `protobuf:"bytes,10,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	ErrorPath            string   `protobuf:"bytes,11,opt,name=error_path,json=errorPath,proto3" json:"error_path,omitempty"`
	Args                 []string `protobuf:"bytes,12,rep,name=args,proto3" json:"args,omitempty"`
	Env                  []string `protobuf:"bytes,13,rep,name=env,proto3" json:"env,omitempty"`
	LogPath              string   `protobuf:"bytes,14,opt,name=log_path,json=logPath,proto3" json:"log_path,omitempty"`
	Uid                  uint32   `protobuf:"varint,16,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid                  int32    `protobuf:"zigzag32,17,opt,name=gid,proto3" json:"gid,omitempty"`
	UseSeccomp           bool     `protobuf:"varint,18,opt,name=use_seccomp,json=useSeccomp,proto3" json:"use_seccomp,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_judge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_judge_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetMaxCpuTime() int32 {
	if x != nil {
		return x.MaxCpuTime
	}
	return 0
}

func (x *Config) GetMaxRealTime() int32 {
	if x != nil {
		return x.MaxRealTime
	}
	return 0
}

func (x *Config) GetMaxMemory() int64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *Config) GetMaxStack() int64 {
	if x != nil {
		return x.MaxStack
	}
	return 0
}

func (x *Config) GetMaxProcessNumber() int32 {
	if x != nil {
		return x.MaxProcessNumber
	}
	return 0
}

func (x *Config) GetMaxOutputSize() int64 {
	if x != nil {
		return x.MaxOutputSize
	}
	return 0
}

func (x *Config) GetMemoryLimitCheckOnly() int32 {
	if x != nil {
		return x.MemoryLimitCheckOnly
	}
	return 0
}

func (x *Config) GetExePath() string {
	if x != nil {
		return x.ExePath
	}
	return ""
}

func (x *Config) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *Config) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

func (x *Config) GetErrorPath() string {
	if x != nil {
		return x.ErrorPath
	}
	return ""
}

func (x *Config) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Config) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Config) GetLogPath() string {
	if x != nil {
		return x.LogPath
	}
	return ""
}

func (x *Config) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Config) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Config) GetUseSeccomp() bool {
	if x != nil {
		return x.UseSeccomp
	}
	return false
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuTime  int32      `protobuf:"varint,1,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	RealTime int32      `protobuf:"varint,2,opt,name=real_time,json=realTime,proto3" json:"real_time,omitempty"`
	Memory   int64      `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Signal   int32      `protobuf:"varint,4,opt,name=signal,proto3" json:"signal,omitempty"`
	ExitCode int32      `protobuf:"varint,5,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Error    ErrorCode  `protobuf:"varint,6,opt,name=error,proto3,enum=judge.ErrorCode" json:"error,omitempty"`
	Result   ResultCode `protobuf:"varint,7,opt,name=result,proto3,enum=judge.ResultCode" json:"result,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_judge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_judge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_judge_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetCpuTime() int32 {
	if x != nil {
		return x.CpuTime
	}
	return 0
}

func (x *Result) GetRealTime() int32 {
	if x != nil {
		return x.RealTime
	}
	return 0
}

func (x *Result) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Result) GetSignal() int32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *Result) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *Result) GetError() ErrorCode {
	if x != nil {
		return x.Error
	}
	return ErrorCode_SUCCESS
}

func (x *Result) GetResult() ResultCode {
	if x != nil {
		return x.Result
	}
	return ResultCode_ACCEPTED
}

var File_judge_proto protoreflect.FileDescriptor

var file_judge_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6a,
	0x75, 0x64, 0x67, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x78, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x22, 0xe0,
	0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2a, 0xcd, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x0e,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a, 0x0b, 0x46, 0x4f, 0x52,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x0e, 0x50, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x18, 0x0a, 0x0b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x52, 0x4f,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xfb, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53,
	0x45, 0x43, 0x43, 0x4f, 0x4d, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xfa, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x10, 0x53, 0x45, 0x54, 0x52,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf9, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a, 0x0b, 0x44, 0x55, 0x50, 0x32, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x53, 0x45, 0x54, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a,
	0x0d, 0x45, 0x58, 0x45, 0x43, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf6,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x09, 0x53, 0x50, 0x4a,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x2a, 0xb0, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x0c, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x50, 0x55,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x70, 0x62, 0x2f, 0x6a, 0x75, 0x64, 0x67,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_judge_proto_rawDescOnce sync.Once
	file_judge_proto_rawDescData = file_judge_proto_rawDesc
)

func file_judge_proto_rawDescGZIP() []byte {
	file_judge_proto_rawDescOnce.Do(func() {
		file_judge_proto_rawDescData = protoimpl.X.CompressGZIP(file_judge_proto_rawDescData)
	})
	return file_judge_proto_rawDescData
}

var file_judge_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_judge_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_judge_proto_goTypes = []interface{}{
	(ErrorCode)(0),  // 0: judge.ErrorCode
	(ResultCode)(0), // 1: judge.ResultCode
	(*Config)(nil),  // 2: judge.Config
	(*Result)(nil),  // 3: judge.Result
}
var file_judge_proto_depIdxs = []int32{
	0, // 0: judge.Result.error:type_name -> judge.ErrorCode
	1, // 1: judge.Result.result:type_name -> judge.ResultCode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_judge_proto_init() }
func file_judge_proto_init() {
	if File_judge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_judge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_judge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_judge_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_judge_proto_goTypes,
		DependencyIndexes: file_judge_proto_depIdxs,
		EnumInfos:         file_judge_proto_enumTypes,
		MessageInfos:      file_judge_proto_msgTypes,
	}.Build()
	File_judge_proto = out.File
	file_judge_proto_rawDesc = nil
	file_judge_proto_goTypes = nil
	file_judge_proto_depIdxs = nil
}
